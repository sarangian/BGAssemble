#!/usr/bin/env pythonimport timeimport jsonimport reimport luigiimport osimport subprocessimport loggingimport enum########################################################################################################################import osdef createFolder(directory):    try:        if not os.path.exists(directory):            os.makedirs(directory)    except OSError:        print ('Error: Creating directory. ' +  directory)        # ExamplecreateFolder('./assembly_spades/')createFolder('./cleaned_data/')createFolder('./qc_report/')createFolder('./log/')########################################################################################################################class GlobalParameter(luigi.Config):    basefolder = luigi.Parameter(default=(os.getcwd()))    #logfolder = luigi.Parameter(default=(os.getcwd()) + '/log')def run_cmd(cmd):    p = subprocess.Popen(cmd, bufsize=-1, shell=True, universal_newlines=True, stdout=subprocess.PIPE,                         executable='/bin/bash')    output = p.communicate()[0]    return output########################################################################################################################class raw_reads_qc(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-t 12")    def output(self):        folder = GlobalParameter().basefolder + "/qc_report/" + self.__class__.__name__ + "/"        return {'out_pe_1': luigi.LocalTarget(folder + self.sample + "_pe_1_fastqc.html"),                'out_pe_2': luigi.LocalTarget(folder + self.sample + "_pe_2_fastqc.html"),                'out_mp_1': luigi.LocalTarget(folder + self.sample + "_mp_1_fastqc.html"),                'out_mp_2': luigi.LocalTarget(folder + self.sample + "_mp_2_fastqc.html")                }    def run(self):        folder = GlobalParameter().basefolder + "/qc_report/" + self.__class__.__name__ + "/"        cmd_raw_pe_qc = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; fastqc {inputfolder}{sample}_pe_1.fastq {inputfolder}{sample}_pe_2.fastq -o {folder}".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/raw_data/paired-end/",            Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_raw_pe_qc)        print run_cmd(cmd_raw_pe_qc)        cmd_raw_mp_qc = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; fastqc {inputfolder}{sample}_mp_1.fastq {inputfolder}{sample}_mp_2.fastq -o {folder}".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/raw_data/mate-pair/",            Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_raw_mp_qc)        print run_cmd(cmd_raw_mp_qc)#########################################################################################################################class pe(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-q 20 -l 150 -c -W 4 -5 -3")    n_cpu = luigi.Parameter(default="4")    def output(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        return {'out1': luigi.LocalTarget(folder + self.sample + "_clean_pe_1.fastq"),                'out2': luigi.LocalTarget(folder + self.sample + "_clean_pe_2.fastq")}    def run(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        cmd_prinseq = "[ -d  {folder} ] || mkdir {folder};prinseq -fastq {inputfolder}{sample}_pe_1.fastq -fastq2 {inputfolder}{sample}_pe_2.fastq -trim_qual_left 20 -trim_qual_right 20 -range_gc 30-60 -out_good {folder}{sample}_pe_prinseq".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/raw_data/paired-end/")        print("****** NOW RUNNING COMMAND ******: " + cmd_prinseq)        print run_cmd(cmd_prinseq)        cmd_fastp = "[ -d  {folder} ] || mkdir {folder};fastp -w {n_cpu} -i {inputfolder}{sample}_pe_prinseq_1.fastq -I {inputfolder}{sample}_pe_prinseq_2.fastq -o {folder}{sample}_clean_pe_1.fastq -O {folder}{sample}_clean_pe_2.fastq {Parameter} ".format(            sample=self.sample, folder=folder, n_cpu=self.n_cpu,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/pe/",            Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_fastp)        print run_cmd(cmd_fastp)########################################################################################################################class mp(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="--rf --separate")    def output(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        return {'out1': luigi.LocalTarget(folder + self.sample + "_clean_mp_1.fastq"),                'out2': luigi.LocalTarget(folder + self.sample + "_clean_mp_2.fastq")}    def run(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        cmd_nxtrim = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; nxtrim  -1 {inputfolder}{sample}_mp_1.fastq -2 {inputfolder}{sample}_mp_2.fastq -O {sample} {Parameter}".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/raw_data/mate-pair/",            Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_nxtrim)        print run_cmd(cmd_nxtrim)        cmd_concat = "[ -d  {folder} ] || cd {folder}; zcat {folder}{sample}_R1.mp.fastq.gz {folder}{sample}_R1.unknown.fastq.gz > {folder}{sample}_nxtrim_mp_1.fastq && zcat {folder}{sample}_R2.mp.fastq.gz {folder}{sample}_R2.unknown.fastq.gz > {folder}{sample}_nxtrim_mp_2.fastq && rm {folder}*.gz".format(            folder=folder, sample=self.sample)        # print run_cmd("****** NOW RUNNING COMMAND ******: " + cmd_concat)        print run_cmd(cmd_concat)        cmd_fastp = "[ -d  {folder} ] || cd {folder};fastp -i {inputfolder}{sample}_nxtrim_mp_1.fastq -I {inputfolder}{sample}_nxtrim_mp_2.fastq -o {folder}{sample}_clean_mp_1.fastq -O {folder}{sample}_clean_mp_2.fastq -l 100".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/mp/")        # print("****** NOW RUNNING COMMAND ******: " + cmd_fastp)        print run_cmd(cmd_fastp)########################################################################################################################class longread(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-q 15 -l 5000")    def output(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        return {'out': luigi.LocalTarget(folder + self.sample + "_clean_longread.fastq")}    def run(self):        folder = GlobalParameter().basefolder + "/cleaned_data/" + self.__class__.__name__ + "/"        cmd = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; cat {inputfolder}{sample}_longread.fastq | NanoFilt {Parameter} > {sample}_clean_longread.fastq".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/raw_data/longread/", Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd)        print run_cmd(cmd)########################################################################################################################class ProcessReads(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-t 12")    # def requires(self):    # return pe(sample=self.sample),mp(samle=self.sample)    def requires(self):        return [            raw_reads_qc(sample=self.sample),            pe(sample=self.sample),            mp(sample=self.sample),            longread(sample=self.sample),            ]    def output(self):        folder = GlobalParameter().basefolder + "/qc_report/" + self.__class__.__name__ + "/"        return {'out_pe_1': luigi.LocalTarget(folder + self.sample + "_clean_pe_1_fastqc.html"),                'out_pe_2': luigi.LocalTarget(folder + self.sample + "_clean_pe_2_fastqc.html"),                'out_mp_1': luigi.LocalTarget(folder + self.sample + "_clean_mp_1_fastqc.html"),                'out_mp_2': luigi.LocalTarget(folder + self.sample + "_clean_mp_2_fastqc.html")                }    def run(self):        folder = GlobalParameter().basefolder + "/qc_report/" + self.__class__.__name__ + "/"        cmd_clean_pe_qc = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; fastqc {inputfolder}{sample}_clean_pe_1.fastq {inputfolder}{sample}_clean_pe_2.fastq -o {folder}".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/pe/", Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_clean_pe_qc)        print run_cmd(cmd_clean_pe_qc)        cmd_clean_mp_qc = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; fastqc {inputfolder}{sample}_clean_mp_1.fastq {inputfolder}{sample}_clean_mp_2.fastq -o {folder}".format(            sample=self.sample, folder=folder,            inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/mp/", Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + cmd_clean_mp_qc)        print run_cmd(cmd_clean_mp_qc)#########################################################################################################################class Spades(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-k 33,41,49,57,65,73,81,89,97,105,113,121 -t 12 -m 80")    def requires(self):        return ProcessReads(sample=self.sample)    def output(self):        folder = GlobalParameter().basefolder + "/assembly_spades/"        return {'out': luigi.LocalTarget(folder + "scaffolds.fasta")}    def run(self):        # folder = GlobalParameter().basefolder+"/"+ self.__class__.__name__ + "/"        spades_cmd = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; spades.py {Parameter} --pe1-1 {pe_cleaned_folder}{sample}_clean_pe_1.fastq --pe1-2 {pe_cleaned_folder}{sample}_clean_pe_2.fastq --mp1-1 {mp_cleaned_folder}{sample}_clean_mp_1.fastq --mp1-2 {mp_cleaned_folder}{sample}_clean_mp_2.fastq --nanopore {long_cleaned_folder}{sample}_clean_longread.fastq -o {folder}".format(            folder=os.path.abspath(GlobalParameter().basefolder) + "/assembly_spades/", Parameter=self.Parameter,            pe_cleaned_folder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/pe/", sample=self.sample,            mp_cleaned_folder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/mp/",            long_cleaned_folder=os.path.abspath(GlobalParameter().basefolder) + "/cleaned_data/longread/")        print("****** NOW RUNNING COMMAND ******: " + spades_cmd)        print run_cmd(spades_cmd)########################################################################################################################### Filter Spades Resultclass filterSpades(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="scaffold.fasta")    def output(self):        folder = GlobalParameter().basefolder + "/" + self.__class__.__name__ + "/"        return {'out': luigi.LocalTarget(folder + self.sample + "_1.fna")}    def run(self):        folder = GlobalParameter().basefolder + "/" + self.__class__.__name__ + "/"        filter_cmd = "[ -d  {folder} ] || mkdir {folder}; cd {folder};filterSpades.py {inputfolder}scaffolds.fasta --spadeslog {inputfolder}spades.log --sample_out {sample} 2>&1 | tee {folder}filter_spades.log ".format(            folder=folder, inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/assembly_spades/",            sample=self.sample, Parameter=self.Parameter)        print("****** NOW RUNNING COMMAND ******: " + filter_cmd)        run_cmd(filter_cmd)########################################################################################################################### Checkmclass checkM(luigi.Task):    sample = luigi.Parameter()    Parameter = luigi.Parameter(default="-t 4 --pplacer_threads 4")    def output(self):        folder = GlobalParameter().basefolder + "/" + self.__class__.__name__ + "/"        # logout = GlobalParameter().logfolder + "/" + self.__class__.__name__ + "/"        return {'out': luigi.LocalTarget(folder + "/bins/" + self.sample + ".1")}    def run(self):        folder = GlobalParameter().basefolder + "/" + self.__class__.__name__ + "/"        cmd = "[ -d  {folder} ] || mkdir {folder}; cd {folder}; checkm lineage_wf  {Parameter} {inputfolder} {folder} 2>&1 | tee {logfolder}checkm.log".format(            folder=folder, inputfolder=os.path.abspath(GlobalParameter().basefolder) + "/filterSpades/",            logfolder=os.path.abspath(GlobalParameter().logfolder) + "/", Parameter=self.Parameter, sample=self.sample)        print("****** NOW RUNNING COMMAND ******: " + cmd)        print run_cmd(cmd)##########################################################################################################################if __name__ == '__main__':    luigi.run()